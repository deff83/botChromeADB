/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'


jar {
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'com.Deff83.Main'
        )
    }

    // You can reference any part of the dependency configurations,
    // and you can have as many from statements as you need
    from configurations.compile
    // I just copied them into the top of the jar, so it looks like the eclipse exported
    // runnable jar, but you could designate a lib directory, and reference that in the
    // classpath as "lib/$it.name" instead of it.getName()
    into ''
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}



dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // https://mvnrepository.com/artifact/net.java.dev.jna/jna


    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'net.java.dev.jna:jna:5.6.0'
    implementation 'com.google.guava:guava:23.0'
    implementation 'net.openhft.com.binance.api:binance-api-client:2.17.1'
	implementation 'com.sun.jna:jna:3.0.9'
	implementation 'org.apache.logging.log4j:log4j-core:2.11.1'
	implementation 'org.apache.logging.log4j:log4j-api:2.11.1'
	implementation 'org.json:json:20180813'
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

